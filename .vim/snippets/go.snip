snippet pf
options head
    fmt.Printf("${1}\n"${2:})

snippet main
abbr    main
options head
    package main

    func main() {
        ${0:TARGET}
    }

snippet gen
abbr    go:generate
options head
    //go:generate ${0:COMMAND}

snippet stringer
abbr    go:generate
options head
    //go:generate stringer -type ${0:TYPE}
    
snippet ebiten
abbr    ebiten template
options head
    package main
    
    import (
    	"log"
    
    	"github.com/hajimehoshi/ebiten"
    )
    
    type Game struct{}
    
    func (g *Game) Update(screen *ebiten.Image) error {
    	return nil
    }
    
    func (g *Game) Draw(screen *ebiten.Image) {
    }
    
    func (g *Game) Layout(outsideWidth, outsideHeight int) (screenWidth, screenHeight int) {
    	return 320, 240
    }

    func main() {
    	game := &Game{}
    	ebiten.SetWindowSize(640, 480)
    	ebiten.SetWindowTitle("Your game's title")
    
    	if err := ebiten.RunGame(game); err != nil {
    		log.Fatal(err)
    	}
    }

snippet method
abbr    func ...() { ... }
alias   m
options     head
  func (${1:t T}) ${2:fname}(${3}) ${4:int }{
    ${0:TARGET:return }
  }
    
snippet ife
abbr    if err != nil { ... }
options     head
    if err != nil {
        ${0:TARGET}
    }

snippet return
abbr    return ...
options head
    `g:GoReturn()`

snippet bi
abbr    big.NewInt(N)
    big.NewInt(${1:N})

snippet test
abbr    func Test... (t *testing.T) {
options head
  func Test${1:fname}(t *testing.T) {
	t.Parallel()
	tests := map[string]struct {
        ${2:struct}
    }{
        ${3:data}
    }
    for name, tc := range tests {
        tc := tc
        t.Run(name, func(t *testing.T) {
            t.Parallel()
            ${0:TARGET}
        })
    }
  }

snippet     tef
abbr        t.Errorf(...)
options     head
    t.Errorf("%s (got: %v, want: %v)", name, ${1:got}, ${2:want})
