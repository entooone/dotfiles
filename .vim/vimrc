" ==============================
" General settings
" ==============================
set encoding=utf-8
set nobomb
scriptencoding utf-8
filetype plugin indent on
syntax on
highlight Normal ctermbg=none
set nowrap
set hlsearch
set ignorecase
set smartcase
set autoindent
set ruler
set number  "行番号の表示
set list  "行末に $ を表示
set wildmenu  "コマンドの補完
set showcmd
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set smarttab
set backspace=indent,eol,start  "バックスペースの有効化
set clipboard=unnamed  "クリップボードの設定
set visualbell t_vb=  "ビープ音の設定
set history=5000  "コマンド履歴の件数
set fileencoding=utf-8  "保存時の文字コード
set fileencodings=ucs-boms,utf-8,euc-jp,cp932  "読み込み時の文字コードの自動判別. 左側優先
set fileformats=unix,dos,mac  "改行コードの自動判別. 左側優先
set ambiwidth=double  "□や○の文字が崩れる問題を解決
set conceallevel=0

" ==============================
" autocmd
" ==============================
autocmd BufRead,BufNewFile     *.rwi  set filetype=rwi
autocmd BufNewFile,BufReadPost *.md   set filetype=markdown wrap noexpandtab
autocmd BufNewFile,BufReadPost *.snip set filetype=snippet
" sw = softtabstop
" sts= shiftwidth
" ts = tabstop
autocmd FileType python      setlocal sw=4 sts=4 ts=4
autocmd FileType python      :set dictionary=$HOME/.vim/dict/default.dict,$HOME/.vim/dict/python.dict
autocmd FileType cs          setlocal sw=4 sts=4 ts=4
autocmd FileType cs          :set dictionary=$HOME/.vim/dict/default.dict,$HOME/.vim/dict/cs.dict,$HOME/.vim/dict/unity.dict
autocmd FileType snippet     setlocal sw=2 sts=2 ts=2
autocmd BufRead,BufNewFile *.txt set wrap
autocmd BufRead,BufNewFile ~/.ssh/conf.d/*.conf set filetype=sshconfig
autocmd BufRead,BufNewFile ~/.config/polybar/config set filetype=dosini

" ==============================
" Cursor Setting
" ==============================
if has('vim_starting')
    " 挿入モード時に非点滅の縦棒タイプのカーソル
    let &t_SI .= "\e[6 q"
    " ノーマルモード時に非点滅のブロックタイプのカーソル
    let &t_EI .= "\e[2 q"
    " 置換モード時に非点滅の下線タイプのカーソル
    let &t_SR .= "\e[4 q"
endif

" ==============================
" Cursorline Setting
" ==============================
augroup vimrc-auto-cursorline
  autocmd!
  autocmd CursorMoved,CursorMovedI * call s:auto_cursorline('CursorMoved')
  autocmd CursorHold,CursorHoldI * call s:auto_cursorline('CursorHold')
  autocmd WinEnter * call s:auto_cursorline('WinEnter')
  autocmd WinLeave * call s:auto_cursorline('WinLeave')

  let s:cursorline_lock = 0
  function! s:auto_cursorline(event)
    if a:event ==# 'WinEnter'
      setlocal cursorline
      let s:cursorline_lock = 2
    elseif a:event ==# 'WinLeave'
      setlocal nocursorline
    elseif a:event ==# 'CursorMoved'
      if s:cursorline_lock
        if 1 < s:cursorline_lock
          let s:cursorline_lock = 1
        else
          setlocal nocursorline
          let s:cursorline_lock = 0
        endif
      endif
    elseif a:event ==# 'CursorHold'
      setlocal cursorline
      let s:cursorline_lock = 1
    endif
  endfunction
augroup END

" ==============================
" KeyMap
" ==============================
autocmd BufNewFile,BufRead *.py nnoremap <C-e> :<C-u>!python %
autocmd BufNewFile,BufRead *.cc nnoremap <C-e> :<C-u>!g++ % -o execute_cpp && ./execute_cpp && rm -f ./execute_cpp
autocmd BufNewFile,BufRead *.cpp nnoremap <C-e> :<C-u>!g++ % -o execute_cpp && ./execute_cpp && rm -f ./execute_cpp
autocmd BufNewFile,BufRead *.c nnoremap <C-e> :<C-u>!gcc % -o execute_c && ./execute_c && rm -f ./execute_c
autocmd BufNewFile,BufRead *.go nnoremap <C-e> :<C-u>!go run %
autocmd BufNewFile,BufRead *.cs nnoremap <C-e> :<C-u>!dotnet run
autocmd BufNewFile,BufRead *.txt nnoremap j gj
autocmd BufNewFile,BufRead *.txt nnoremap k gk
autocmd BufNewFile,BufRead *.txt vnoremap j gj
autocmd BufNewFile,BufRead *.txt vnoremap k gk
autocmd BufNewFile,BufRead *.md nnoremap j gj
autocmd BufNewFile,BufRead *.md nnoremap k gk
autocmd BufNewFile,BufRead *.md vnoremap j gj
autocmd BufNewFile,BufRead *.md vnoremap k gk
nnoremap Y y$

" ==============================
" Plugin
" ==============================
call plug#begin('~/.vim/plugged')
"Basic
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
"Plug 'prabirshrestha/asyncomplete.vim'
"Plug 'prabirshrestha/asyncomplete-lsp.vim'
"Plug 'natebosch/vim-lsc'
Plug 'itchyny/lightline.vim'
" ColorScheme
Plug 'fatih/molokai'
" Go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
call plug#end()

" ==============================
" Leader
" ==============================
let mapleader = "\<Space>"

" ==============================
" neosnippet
" ==============================
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
"if has('conceal')
"  set conceallevel=2 concealcursor=niv
"endif

" ==============================
" vim-lsp
" ==============================
" Go
if executable('gopls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'gopls',
        \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
    autocmd BufWritePre *.go LspDocumentFormatSync
endif
"let g:lsp_async_completion = 1

" ==============================
" lightline
" ==============================
if !has('gui_running')
    set t_Co=256
endif
set laststatus=2
set noshowmode
let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \ 'left': [ ['mode', 'paste'], ['readonly', 'filepath', 'modified'] ]
    \ },
    \ 'component_function': {
    \ 'filepath': 'FilePath'
    \ },
    \ }
function! FilePath()
    if winwidth(0) > 90
        return expand('%:s')
    else
        return expand('%:t')
    endif
endfunction

" ==============================
" Molokai
" ==============================
if isdirectory(expand('~/.vim/plugged/molokai'))
    let g:rehash256 = 1
    let g:molokai_original = 1
    colorscheme molokai
endif

" ==============================
" vim-go
" ==============================
nnoremap [vim-go] <Nop>
nmap <Leader>g [vim-go]
set autowrite
map <silent> [vim-go]n :cnext<CR>
map <silent> [vim-go]p :cprevious<CR>
nnoremap <silent> [vim-go]a :cclose<CR>
autocmd BufNewFile,BufRead *.go setlocal nolist noexpandtab tabstop=4 shiftwidth=4
autocmd FileType go nmap <silent> [vim-go]r <Plug>(go-run)
autocmd FileType go nmap <silent> [vim-go]t <Plug>(go-test)
autocmd FileType go nmap <silent> [vim-go]c <Plug>(go-coverage-toggle)
autocmd FileType go nmap <silent> [vim-go]d <Plug>(go-def)
autocmd FileType go nmap <silent> [vim-go]D <Plug>(go-def-pop)
autocmd FileType go nmap <silent> [vim-go]i <Plug>(go-info)

let g:go_fmt_command = "goimports"
let g:go_auto_type_info = 1
let g:go_auto_sameids = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1

"run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
    let l:file = expand('%')
    if l:file =~# '^\f\+_test\.go$'
        call go#test#Test(0, 1)
    elseif l:file =~# '^\f\+\.go$'
        call go#cmd#Build(0)
    endif
endfunction

autocmd FileType go nmap <silent> [vim-go]b :<C-u>call <SID>build_go_files()<CR>


